#!/bin/sh
#
#    Licensed to the Apache Software Foundation (ASF) under one or more
#    contributor license agreements.  See the NOTICE file distributed with
#    this work for additional information regarding copyright ownership.
#    The ASF licenses this file to You under the Apache License, Version 2.0
#    (the "License"); you may not use this file except in compliance with
#    the License.  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#

JAVA_TOOL_OPTIONS="$JAVA_TOOL_OPTIONS -Dlog4j2.formatMsgNoLookups=true"
export JAVA_TOOL_OPTIONS

realpath() {
  OURPWD="`pwd`"
  LINK="${1}"
  while [ -n "${LINK}" ]; do
    cd "`dirname "${LINK}"`"
    realpath_basename="`basename "${LINK}"`"
    realpath_ls="`ls -ld "${LINK}"`"
    LINK="`expr "${realpath_ls}" : '.*-> \(.*\)$'`"
  done
  REALPATH="`pwd`/${realpath_basename}"
  cd "${OURPWD}"
  echo "${REALPATH}"
}

REALNAME="`realpath "${0}"`"
DIRNAME="`dirname "${REALNAME}"`"
PROGNAME="`basename "${REALNAME}"`"

#
# Sourcing environment settings for karaf similar to tomcats setenv
#
KARAF_SCRIPT="client"
export KARAF_SCRIPT
if [ -f "${DIRNAME}/setenv" ]; then
  . "${DIRNAME}/setenv"
fi

#
# Check/Set up some easily accessible MIN/MAX params for JVM mem usage
#
if [ -z "${JAVA_MIN_MEM}" ]; then
    JAVA_MIN_MEM=128M
    export JAVA_MIN_MEM
fi
if [ -z "${JAVA_MAX_MEM}" ]; then
    JAVA_MAX_MEM=512M
    export JAVA_MAX_MEM
fi

warn() {
    echo "${PROGNAME}: $*"
}

die() {
    warn "$*"
    exit 1
}

detectOS() {
    # OS specific support (must be 'true' or 'false').
    cygwin=false;
    darwin=false;
    aix=false;
    os400=false;
    case "`uname`" in
        CYGWIN*)
            cygwin=true
            ;;
        Darwin*)
            darwin=true
            ;;
        AIX*)
            aix=true
            ;;
        OS400*)
            os400=true
            ;;
    esac
    # For AIX, set an environment variable
    if ${aix}; then
         LDR_CNTRL=MAXDATA=0xB0000000@DSA
         export LDR_CNTRL
         echo ${LDR_CNTRL}
    fi
}

unlimitFD() {
    # Use the maximum available, or set MAX_FD != -1 to use that
    if [ -z "${MAX_FD}" ]; then
        MAX_FD="maximum"
    fi

    # Increase the maximum file descriptors if we can
    if [ "${os400}" = "false" -a "${cygwin}" = "false" ]; then
        MAX_FD_LIMIT=`ulimit -H -n`
        if [ "${MAX_FD_LIMIT}" != "unlimited" ]; then 
            if [ $? -eq 0 ]; then
                if [ "${MAX_FD}" = "maximum" -o "${MAX_FD}" = "max" ]; then
                    # use the system max
                    MAX_FD="${MAX_FD_LIMIT}"
                fi

                ulimit -n ${MAX_FD} > /dev/null
                # echo "ulimit -n" `ulimit -n`
                if [ $? -ne 0 ]; then
                    warn "Could not set maximum file descriptor limit: ${MAX_FD}"
                fi
            else
                warn "Could not query system maximum file descriptor limit: ${MAX_FD_LIMIT}"
            fi
        fi
    fi
}

locateHome() {
    if [ -n "${KARAF_HOME}" ]; then
        warn "Ignoring predefined value for KARAF_HOME"
    fi

    # In POSIX shells, CDPATH may cause cd to write to stdout
    (unset CDPATH) >/dev/null 2>&1 && unset CDPATH

    KARAF_HOME="`cd "${DIRNAME}/.."; pwd`"
    if [ ! -d "${KARAF_HOME}" ]; then
        die "KARAF_HOME is not valid: ${KARAF_HOME}"
    fi
}

locateBase() {
    if [ -n "${KARAF_BASE}" ]; then
        if [ ! -d "${KARAF_BASE}" ]; then
            die "KARAF_BASE is not valid: ${KARAF_BASE}"
        fi
    else
        KARAF_BASE="${KARAF_HOME}"
    fi
}

locateData() {
    if [ -n "${KARAF_DATA}" ]; then
        if [ ! -d "${KARAF_DATA}" ]; then
            die "KARAF_DATA is not valid: $KARAF_DATA"
        fi
    else
        KARAF_DATA="${KARAF_BASE}/data"
    fi
}

locateEtc() {
    if [ -n "${KARAF_ETC}" ]; then
        if [ ! -d "${KARAF_ETC}" ]; then
            die "KARAF_ETC is not valid: ${KARAF_ETC}"
        fi
    else
        KARAF_ETC="${KARAF_BASE}/etc"
    fi
}

locateLog() {
    if [ "x${KARAF_LOG}" != "x" ]; then
        if [ ! -d "${KARAF_LOG}" ]; then
            die "KARAF_LOG is not valid: ${KARAF_LOG}"
        fi
    else
        KARAF_LOG=${KARAF_DATA}/log
    fi
}

setupNativePath() {
    # Support for loading native libraries
    LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${KARAF_BASE}/lib:${KARAF_HOME}/lib"

    # For Cygwin, set PATH from LD_LIBRARY_PATH
    if $cygwin; then
        LD_LIBRARY_PATH=`cygpath --path --windows "${LD_LIBRARY_PATH}"`
        PATH="${PATH};${LD_LIBRARY_PATH}"
        export PATH
    fi
    export LD_LIBRARY_PATH
}

pathCanonical() {
    pathCanonical_dst="${1}"
    while [ -h "${pathCanonical_dst}" ] ; do
        pathCanonical_ls="`ls -ld "${pathCanonical_dst}"`"
        pathCanonical_link="`expr "${pathCanonical_ls}" : '.*-> \(.*\)$'`"
        if expr "${pathCanonical_link}" : '/.*' > /dev/null; then
            pathCanonical_dst="${pathCanonical_link}"
        else
            pathCanonical_dst="`dirname "${pathCanonical_dst}"`/${pathCanonical_link}"
        fi
    done
    pathCanonical_bas="`basename "${pathCanonical_dst}"`"
    pathCanonical_dir="`dirname "${pathCanonical_dst}"`"
    if [ "${pathCanonical_bas}" != "${pathCanonical_dir}" ]; then
        pathCanonical_dst="`pathCanonical "${pathCanonical_dir}"`/${pathCanonical_bas}"
    fi
    echo "${pathCanonical_dst}" | sed -e 's#//#/#g' -e 's#/./#/#g' -e 's#/[^/]*/../#/#g'
}

locateJava() {
    # Setup the Java Virtual Machine
    if ${cygwin} ; then
        [ -n "${JAVA}" ] && JAVA=`cygpath --unix "${JAVA}"`
        [ -n "${JAVA_HOME}" ] && JAVA_HOME=`cygpath --unix "${JAVA_HOME}"`
    fi

    if [ -z "${JAVA_HOME}" -a "${darwin}" = "true" ]; then
        JAVA_HOME="`/usr/libexec/java_home -v 1.8`"
    fi

    if [ -z "${JAVA}" -a -r /etc/gentoo-release ] ; then
        JAVA_HOME="`java-config --jre-home`"
    fi

    if [ -z "${JAVA}" ]; then
        if [ -n "${JAVA_HOME}" ]; then
            if [ ! -d "${JAVA_HOME}" ]; then
                die "JAVA_HOME is not valid: ${JAVA_HOME}"
            fi
            JAVA="${JAVA_HOME}/bin/java"
        else
            warn "JAVA_HOME not set; results may vary"
            JAVA="`type java`"
            JAVA="`expr "${JAVA}" : '.* \(/.*\)$'`"
            if [ -z "${JAVA}" ]; then
                die "java command not found"
            fi
        fi
    fi
    if [ -z "${JAVA_HOME}" ]; then
        locateJava_jh="`pathCanonical "${JAVA}"`"
        locateJava_jh="`dirname "${locateJava_jh}"`"
        JAVA_HOME="`dirname "${locateJava_jh}"`"
    fi
}

detectJVM() {
   #echo "`$JAVA -version`"
   # This service should call `java -version`,
   # read stdout, and look for hints
   if ${JAVA} -version 2>&1 | grep "^IBM" ; then
       JVM_VENDOR="IBM"
   # on OS/400, java -version does not contain IBM explicitly
   elif ${os400}; then
       JVM_VENDOR="IBM"
   else
       JVM_VENDOR="SUN"
   fi
   # echo "JVM vendor is $JVM_VENDOR"
}

setupDefaults() {
    DEFAULT_JAVA_OPTS="-Xms${JAVA_MIN_MEM} -Xmx${JAVA_MAX_MEM} "

    #Set the JVM_VENDOR specific JVM flags
    if [ "${JVM_VENDOR}" = "SUN" ]; then
        # permgen was removed in Java 8
        VERSION=`"${JAVA}" -version 2>&1 | egrep '"([0-9].[0-9]\..*[0-9]).*"' | awk '{print substr($3,2,length($3)-2)}' | awk '{print substr($1, 3, 3)}' | sed -e 's;\.;;g'`
        if [ "${VERSION}" -lt "80" ]; then
            # Check some easily accessible MIN/MAX params for JVM mem usage
            if [ -n "${JAVA_PERM_MEM}" ]; then
                DEFAULT_JAVA_OPTS="${DEFAULT_JAVA_OPTS} -XX:PermSize=${JAVA_PERM_MEM}"
            fi
            if [ -n "${JAVA_MAX_PERM_MEM}" ]; then
                DEFAULT_JAVA_OPTS="${DEFAULT_JAVA_OPTS} -XX:MaxPermSize=${JAVA_MAX_PERM_MEM}"
            fi
        fi
        DEFAULT_JAVA_OPTS="-server ${DEFAULT_JAVA_OPTS} -Dcom.sun.management.jmxremote"
    elif [ "${JVM_VENDOR}" = "IBM" ]; then
        if ${os400}; then
            DEFAULT_JAVA_OPTS="${DEFAULT_JAVA_OPTS}"
        elif ${aix}; then
            DEFAULT_JAVA_OPTS="-Xverify:none -Xdump:heap -Xlp ${DEFAULT_JAVA_OPTS}"
        else
            DEFAULT_JAVA_OPTS="-Xverify:none ${DEFAULT_JAVA_OPTS}"
        fi
    fi

    # Add the jars in the lib dir
    CLASSPATH="${KARAF_HOME}/system/org/apache/karaf/org.apache.karaf.client/4.2.4/org.apache.karaf.client-4.2.4.jar"
    CLASSPATH="${CLASSPATH}:${KARAF_HOME}/system/org/apache/sshd/sshd-core/1.7.0/sshd-core-1.7.0.jar"
    CLASSPATH="${CLASSPATH}:${KARAF_HOME}/system/org/fusesource/jansi/jansi/1.17.1/jansi-1.17.1.jar"
    CLASSPATH="${CLASSPATH}:${KARAF_HOME}/system/org/jline/jline/3.10.0/jline-3.10.0.jar"
    CLASSPATH="${CLASSPATH}:${KARAF_HOME}/system/org/slf4j/slf4j-api/1.7.12/slf4j-api-1.7.12.jar"

}

init() {
    # Determine if there is special OS handling we must perform
    detectOS

    # Unlimit the number of file descriptors if possible
    unlimitFD

    # Locate the Karaf home directory
    locateHome

    # Locate the Karaf base directory
    locateBase

    # Locate the Karaf data directory
    locateData

    # Locate the Karaf etc directory
    locateEtc

    # Locate the Karaf log directory
    locateLog

    # Setup the native library path
    setupNativePath

    # Locate the Java VM to execute
    locateJava

    # Determine the JVM vendor
    detectJVM

    # Setup default options
    setupDefaults

}

run() {

    if ${cygwin}; then
        KARAF_HOME=`cygpath --path --windows "${KARAF_HOME}"`
        KARAF_BASE=`cygpath --path --windows "${KARAF_BASE}"`
        KARAF_DATA=`cygpath --path --windows "${KARAF_DATA}"`
        KARAF_ETC=`cygpath --path --windows "${KARAF_ETC}"`
        KARAF_LOG=`cygpath --path --windows "${KARAF_LOG}"`
        if [ -n "${CLASSPATH}" ]; then
            CLASSPATH=`cygpath --path --windows "${CLASSPATH}"`
        fi
    fi

    exec "${JAVA}" ${JAVA_OPTS} -Dkaraf.instances="${KARAF_HOME}/instances" -Dkaraf.home="${KARAF_HOME}" -Dkaraf.base="${KARAF_BASE}" -Dkaraf.etc="${KARAF_ETC}" -Dkaraf.log="${KARAF_LOG}" -Djava.io.tmpdir="${KARAF_DATA}/tmp" -Djava.util.logging.config.file="${KARAF_BASE}/etc/java.util.logging.properties" ${KARAF_OPTS} ${OPTS} -classpath "${CLASSPATH}" org.apache.karaf.client.Main "$@"
}

main() {
    init
    run "$@"
}

main "$@"